leaseTime：锁的释放时间
waitTime：等待锁的时间和释放时间
interruptibly：中断标识
internalLockLeaseTime：内部锁的释放时间（默认时间）；
LockWatchdogTimeout：锁的开门狗超时时间，默认是30s
自动续期是 1/3 看门狗时间 喂狗；

加锁：与自动续期机制
    1、lock.lock();  如果不指定锁的释放时间，默认就是-1
        1.1、lock(-1【leaseTime】, null【TimeUnit】, false);
            1.1.1：  先获取当前线程id  long threadId = Thread.currentThread().getId();
            1.1.2：  进行加锁：(tryAcquire(-1【waitTime】, -1【leaseTime】, unit, threadId);
                     方法返回null就代表加锁成功
                1：get(tryAcquireAsync(waitTime, leaseTime, unit, threadId));
                    1：leaseTime = -1：没传锁的释放时间；用默认的internalLockLeaseTime
                        ttlRemainingFuture = tryLockInnerAsync(waitTime, internalLockLeaseTime,
                                            TimeUnit.MILLISECONDS, threadId, RedisCommands.EVAL_LONG);
                    2：leaseTime != -1：如果传了锁的释放时间；用你的
                        ttlRemainingFuture = tryLockInnerAsync(waitTime, leaseTime, unit, threadId, RedisCommands.EVAL_LONG);

                    3：加锁【异步加锁】：future = tryLockInnerAsync(-1,30000,ms,114,RedisCommands.EVAL_LONG)

                    4：future OK了；加锁成功：
                        1：leaseTime != -1；传了锁时间，啥都不干
                        2：leaseTime == -1；没传所时间
                            scheduleExpirationRenewal(threadId);
                            renewExpiration();重新设置过期时间（续期）

                            //10s以后；续期
                            newTimeout(()->{任务},30/3,TimeUnit.MILLISECONDS);
                            续期：future = renewExpirationAsync(threadId); lua脚本设置过期时间
                            //利用递归，在future.onComplete()完成以后，再次调用自己